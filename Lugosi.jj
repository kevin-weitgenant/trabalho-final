/* Generated By:JavaCC: Do not edit this line. Lugosi.java */
import ast.*;
import java.io.*;
import java.text.ParseException;
import java.util.ArrayList;

public class Lugosi implements LugosiConstants {
    public static void main(String args[]) throws ParseException, IOException {
        Lugosi parser = new Lugosi(new FileInputStream(args[0]));
        Prog arvore = parser.Lugosi();
        System.out.println(arvore.toString());
    }

    // LUGOSI -> MAIN FUNC?
  static final public Prog Lugosi() throws ParseException {
  Main m;
  ArrayList<Func> lf = new ArrayList<Func>();
  Func f;
    m = Main();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      f = Func();
         lf.add(f);
    }
    {if (true) return new Prog(m, lf);}
    throw new Error("Missing return statement in function");
  }

  static final public Main Main() throws ParseException {
  ArrayList<Vardecl> lv = new ArrayList<Vardecl>();
  ArrayList<Comando> lc = new ArrayList<Comando>();
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Vardecl(lv);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTIO:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      Comando(lc);
    }
    jj_consume_token(FCHAVES);
    {if (true) return new Main(lv, lc);}
    throw new Error("Missing return statement in function");
  }

  static final public void Vardecl(ArrayList<Vardecl> lv) throws ParseException {
  String t, id;
    jj_consume_token(LET);
    t = Tipo();
    id = jj_consume_token(ID);
    jj_consume_token(PONTOEVIRGULA);
    lv.add(new Vardecl(t, id));
  }

  static final public String Tipo() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case BOOL:
      t = jj_consume_token(BOOL);
      break;
    case VOID:
      t = jj_consume_token(VOID);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void Comando(ArrayList<Comando> lc) throws ParseException {
  Comando c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      c = ComandoAtrib(lc);
      break;
      c = ComandoChamada(lc);
      break;
    case IF:
      c = ComandoIf(lc);
      break;
    case WHILE:
      c = ComandoWhile(lc);
      break;
      c = ComandoInput(lc);
      break;
    case RETURN:
      c = ComandoReturn(lc);
      break;
    case PRINTIO:
      c = ComandoOutput(lc);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Comando ComandoAtrib(ArrayList<Comando> lc) throws ParseException {
  Token id;
  Exp e;
    id = jj_consume_token(ID);
    jj_consume_token(ATR);
    e = Exp();
    jj_consume_token(PONTOEVIRGULA);
    Comando c = new ComandoAtrib(id.image, e);
    lc.add(c);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoChamada(ArrayList<Comando> lc) throws ParseException {
  Token id;
  ArrayList<Exp> le = new ArrayList<Exp>();
    id = jj_consume_token(ID);
    jj_consume_token(APARENTESES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENTESES:
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      ListaExp(le);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(FPARENTESES);
    jj_consume_token(PONTOEVIRGULA);
    Comando c = new ComandoChamada(id.image, le);
    lc.add(c);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoIf(ArrayList<Comando> lc) throws ParseException {
  Exp e;
  ArrayList<Comando> lc2 = new ArrayList<Comando>();
    jj_consume_token(IF);
    e = Exp();
    jj_consume_token(ACHAVES);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTIO:
      case ID:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      Comando(lc2);
    }
    jj_consume_token(FCHAVES);
    jj_consume_token(PONTOEVIRGULA);
    Comando c = new ComandoIf(e, lc2);
    lc.add(c);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoWhile(ArrayList<Comando> lc) throws ParseException {
        Exp e;ArrayList<Comando>lc2=new ArrayList<Comando>();
    jj_consume_token(WHILE);
    e = Exp();
    jj_consume_token(DO);
    jj_consume_token(ACHAVES);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTIO:
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      Comando(lc2);
    }
    jj_consume_token(FCHAVES);
    jj_consume_token(PONTOEVIRGULA);
                                                                                                                                  Comando c=new ComandoWhile(e,lc2);lc.add(c);{if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoInput(ArrayList<Comando> lc) throws ParseException {
        Token id;
    id = jj_consume_token(ID);
    jj_consume_token(ATR);
    jj_consume_token(READIO);
    jj_consume_token(APARENTESES);
    jj_consume_token(FPARENTESES);
                                                                  Comando c=new ComandoInput(id.image);lc.add(c);{if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoReturn(ArrayList<Comando> lc) throws ParseException {
        Exp e;
    jj_consume_token(RETURN);
    e = Exp();
    jj_consume_token(PONTOEVIRGULA);
                                               Comando c=new ComandoReturn(e);lc.add(c);{if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando ComandoOutput(ArrayList<Comando> lc) throws ParseException {
        Exp e;
    jj_consume_token(PRINTIO);
    e = Exp();
    jj_consume_token(PONTOEVIRGULA);
                                                Comando c=new ComandoOutput(e);lc.add(c);{if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
        Exp e,e1,e2;String op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENTESES:
      jj_consume_token(APARENTESES);
      e1 = Exp();
      op = Op();
      e2 = Exp();
      jj_consume_token(FPARENTESES);
                                                                                   {if (true) return new ExpBin(e1,op,e2);}
      break;
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      e = Fator();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                                            {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Fator Fator() throws ParseException {
        Token id,num;ArrayList<Exp>le=new ArrayList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
                                                                      {if (true) return new FatorId(id.image);}
      break;
      id = jj_consume_token(ID);
      jj_consume_token(APARENTESES);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APARENTESES:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:
        ListaExp(le);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(FPARENTESES);
                                                                                                                                                      {if (true) return new FatorChamada(id.image,le);}
      break;
    case NUM:
      num = jj_consume_token(NUM);
                                                                                                                                                                                                       {if (true) return new FatorNum(Double.parseDouble(num.image));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                                                                                                                                                                                                                                                                   {if (true) return new FatorBool(true);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                                                                                                                                                                                                                                                                                                        {if (true) return new FatorBool(false);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Op() throws ParseException {
        Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      op = jj_consume_token(SOMA);
      break;
    case SUB:
      op = jj_consume_token(SUB);
      break;
    case MULT:
      op = jj_consume_token(MULT);
      break;
    case DIV:
      op = jj_consume_token(DIV);
      break;
    case AND:
      op = jj_consume_token(AND);
      break;
    case OR:
      op = jj_consume_token(OR);
      break;
    case MENOR:
      op = jj_consume_token(MENOR);
      break;
    case MAIOR:
      op = jj_consume_token(MAIOR);
      break;
    case IGUAL:
      op = jj_consume_token(IGUAL);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                             {if (true) return op.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void ListaExp(ArrayList<Exp> le) throws ParseException {
  Exp e;
    e = Exp();
        le.add(e);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(VIRGULA);
      e = Exp();
                                           le.add(e);
    }
  }

  static final public Func Func() throws ParseException {
        String t,id;ArrayList<Argdecl>la=new ArrayList<Argdecl>();ArrayList<Vardecl>lv=new ArrayList<Vardecl>();ArrayList<Comando>lc=new ArrayList<Comando>();
    jj_consume_token(DEF);
    t = Tipo();
    id = jj_consume_token(ID);
    jj_consume_token(APARENTESES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case FLOAT:
    case BOOL:
      ListaArg(la);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(FPARENTESES);
    jj_consume_token(ACHAVES);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      Vardecl(lv);
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTIO:
      case ID:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      Comando(lc);
    }
    jj_consume_token(FCHAVES);
                                                                                                                                                                                                                                                                            {if (true) return new Func(t,id,la,lv,lc);}
    throw new Error("Missing return statement in function");
  }

  static final public void ListaArg(ArrayList<Argdecl> la) throws ParseException {
  Argdecl a;
    a = Arg();
        la.add(a);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      jj_consume_token(VIRGULA);
      a = Arg();
                                           la.add(a);
    }
  }

  static final public Argdecl Arg() throws ParseException {
    String t,id;
    t = Tipo();
    id = jj_consume_token(ID);
                                  {if (true) return new Argdecl(t,id);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LugosiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x1000,0xd80,0xc040,0xd80,0xc80000,0xd80,0xd80,0xc80000,0xc80000,0xc00000,0xfc000000,0x200000,0xc040,0x1000,0xd80,0x200000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10,0x0,0x10,0x18,0x10,0x10,0x18,0x18,0x18,0x7,0x0,0x0,0x0,0x10,0x0,};
   }

  /** Constructor with InputStream. */
  public Lugosi(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lugosi(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lugosi(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lugosi(LugosiTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LugosiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
